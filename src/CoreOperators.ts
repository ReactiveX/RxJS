import * as operators from "./operator-typings";
export interface CoreOperators<T> {
  buffer: operators.operator_proto_buffer<T>;
  bufferCount: operators.operator_proto_bufferCount<T>;
  bufferTime: operators.operator_proto_bufferTime<T>;
  bufferToggle: operators.operator_proto_bufferToggle<T>;
  bufferWhen: operators.operator_proto_bufferWhen<T>;
  catch: operators.operator_proto_catch<T>;
  combineAll: operators.operator_proto_combineAll<T>;
  combineLatest: operators.operator_proto_combineLatest<T>;
  concat: operators.operator_proto_concat<T>;
  concatAll: operators.operator_proto_concatAll<T>;
  concatMap: operators.operator_proto_concatMap<T>;
  concatMapTo: operators.operator_proto_concatMapTo<T>;
  count: operators.operator_proto_count<T>;
  dematerialize: operators.operator_proto_dematerialize<T>;
  debounce: operators.operator_proto_debounce<T>;
  debounceTime: operators.operator_proto_debounceTime<T>;
  defaultIfEmpty: operators.operator_proto_defaultIfEmpty<T>;
  delay: operators.operator_proto_delay<T>;
  distinctUntilChanged: operators.operator_proto_distinctUntilChanged<T>;
  do: operators.operator_proto_do<T>;
  expand: operators.operator_proto_expand<T>;
  filter: operators.operator_proto_filter<T>;
  finally: operators.operator_proto_finally<T>;
  first: operators.operator_proto_first<T>;
  flatMap: operators.operator_proto_mergeMap<T>;
  flatMapTo: operators.operator_proto_mergeMapTo<T>;
  groupBy: operators.operator_proto_groupBy<T>;
  ignoreElements: operators.operator_proto_ignoreElements<T>;
  last: operators.operator_proto_last<T>;
  every: operators.operator_proto_every<T>;
  map: operators.operator_proto_map<T>;
  mapTo: operators.operator_proto_mapTo<T>;
  materialize: operators.operator_proto_materialize<T>;
  merge: operators.operator_proto_merge<T>;
  mergeAll: operators.operator_proto_mergeAll<T>;
  mergeMap: operators.operator_proto_mergeMap<T>;
  mergeMapTo: operators.operator_proto_mergeMapTo<T>;
  multicast: operators.operator_proto_multicast<T>;
  observeOn: operators.operator_proto_observeOn<T>;
  partition: operators.operator_proto_partition<T>;
  publish: operators.operator_proto_publish<T>;
  publishBehavior: operators.operator_proto_publishBehavior<T>;
  publishReplay: operators.operator_proto_publishReplay<T>;
  reduce: operators.operator_proto_reduce<T>;
  repeat: operators.operator_proto_repeat<T>;
  retry: operators.operator_proto_retry<T>;
  retryWhen: operators.operator_proto_retryWhen<T>;
  sample: operators.operator_proto_sample<T>;
  sampleTime: operators.operator_proto_sampleTime<T>;
  scan: operators.operator_proto_scan<T>;
  share: operators.operator_proto_share<T>;
  single: operators.operator_proto_single<T>;
  skip: operators.operator_proto_skip<T>;
  skipUntil: operators.operator_proto_skipUntil<T>;
  startWith: operators.operator_proto_startWith<T>;
  subscribeOn: operators.operator_proto_subscribeOn<T>;
  switch: operators.operator_proto_switch<T>;
  switchMap: operators.operator_proto_switchMap<T>;
  switchMapTo: operators.operator_proto_switchMapTo<T>;
  take: operators.operator_proto_take<T>;
  takeUntil: operators.operator_proto_takeUntil<T>;
  throttle: operators.operator_proto_throttle<T>;
  throttleTime: operators.operator_proto_throttleTime<T>;
  timeout: operators.operator_proto_timeout<T>;
  timeoutWith: operators.operator_proto_timeoutWith<T>;
  toArray: operators.operator_proto_toArray<T>;
  toPromise: operators.operator_proto_toPromise<T>;
  window: operators.operator_proto_window<T>;
  windowCount: operators.operator_proto_windowCount<T>;
  windowTime: operators.operator_proto_windowTime<T>;
  windowToggle: operators.operator_proto_windowToggle<T>;
  windowWhen: operators.operator_proto_windowWhen<T>;
  withLatestFrom: operators.operator_proto_withLatestFrom<T>;
  zip: operators.operator_proto_zip<T>;
  zipAll: operators.operator_proto_zipAll<T>;
}
